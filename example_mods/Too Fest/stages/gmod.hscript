var colorSwap:ColorSwap;
var sillyOverlay:ShaderFilter;
var canRainbow:Bool = false;
var canFloat:Bool = false;

var lyrics:FlxText;

var bar1:FlxSprite;
var bar2:FlxSprite;

var newVal:Float = 0.1;

function onCreatePost() {
    var bandicam:FlxSprite = new FlxSprite();
    bandicam.loadGraphic(Paths.image("bandicom"));
    bandicam.cameras = [PlayState.instance.camHUD];
    bandicam.x = FlxG.width / 2 - (bandicam.width / 2);
    add(bandicam);

    gmod = new FlxSprite(-300, -100);
    gmod.loadGraphic(Paths.image("gmod"));
    gmod.scale.set(1.2, 1.2);
    bgLayer.add(gmod);

    //bars
    bar1 = new FlxSprite(0, 0);
    bar1.makeGraphic(160, 720, 0xFF000000);
    bar1.cameras = [PlayState.instance.camHUD];
    add(bar1);

    bar2 = new FlxSprite(0, 0);
    bar2.makeGraphic(160, 720, 0xFF000000);
    bar2.cameras = [PlayState.instance.camHUD];
    bar2.x = FlxG.width - (bar2.width);
    add(bar2);

    //lyrics
    lyrics = new FlxText();
    lyrics.text = " ";
    lyrics.cameras = [PlayState.instance.camHUD];
    lyrics.scale.set(4,4);
    lyrics.updateHitbox();
    lyrics.screenCenter();
    lyrics.y = PlayState.instance.healthBarBG.y - (lyrics.height * 2);
    add(lyrics);

    //shader
    colorSwap = new ColorSwap();
    colorSwap.saturation = 0;
    sillyOverlay = new ShaderFilter(colorSwap.shader);
    PlayState.instance.camGame.setFilters([sillyOverlay]);
    PlayState.instance.camHUD.setFilters([sillyOverlay]);

    //strum move
    for (i in 0...PlayState.instance.opponentStrums.length)
        PlayState.instance.opponentStrums.members[i].x = 174 + (112 * i);
        // trace(PlayState.instance.opponentStrums.members[i].x);
    for (i in 0...PlayState.instance.playerStrums.length)
        PlayState.instance.playerStrums.members[i].x = 654 + (112 * i);
        // PlayState.instance.playerStrums.members[i].x = (640 + (112 / 4)) + (i * 112);


    //lol
    PlayState.instance.camGame.alpha = 0;
    PlayState.instance.camHUD.alpha = 0;
    PlayState.instance.dad.alpha = 0;
}
        
function onUpdate(elapsed) {
    // trace(colorSwap.hue);
    if(canRainbow){
        colorSwap.hue += elapsed * newVal;
        if(colorSwap.saturation < 5)
            colorSwap.saturation += elapsed * 0.5;
    }

    if(canFloat){
        PlayState.instance.dad.y += Math.sin(floaty) * 1.5;
        // FlxG.log.add("DICK!");
    }
}

function onEvent(eventName, value1, value2) {
    if(eventName == "Aspect Change"){
        switch(value1){
            case "FULLSCREEN":
                PlayState.instance.camGame.alpha = 1;
                bar1.visible = false;
                bar2.visible = false;

                for (i in 0...PlayState.instance.playerStrums.length)
                    PlayState.instance.playerStrums.members[i].x = ((1120 - (112 * 4) + (112 * i)));
                for (i in 0...PlayState.instance.opponentStrums.length)
                    PlayState.instance.opponentStrums.members[i].x = 160 + (112 * i);
            case "4:3":
                PlayState.instance.camGame.alpha = 1;
                bar1.visible = true;
                bar2.visible = true;
            
                for (i in 0...PlayState.instance.opponentStrums.length)
                    PlayState.instance.opponentStrums.members[i].x = 174 + (112 * i);
                for (i in 0...PlayState.instance.playerStrums.length)
                    PlayState.instance.playerStrums.members[i].x = 654 + (112 * i);            }
    }
    if (eventName == "Show You"){
        switch(value1){
            case "ON":
                PlayState.instance.camGame.alpha = 0;
                lyrics.text = value2;
                bar1.visible = false;
                bar2.visible = false;

                for (i in 0...PlayState.instance.opponentStrums.length)
                    PlayState.instance.opponentStrums.members[i].x -= 1000;
                for (i in 0...PlayState.instance.playerStrums.length)
                    FlxTween.tween(PlayState.instance.playerStrums.members[i], {x: PlayState.instance.playerStrums.members[i].x + 80, angle: PlayState.instance.playerStrums.members[i].angle + 360}, 0.2);
            default:
                // PlayState.instance.camGame.alpha = 1;
                lyrics.text = value2;
                // bar1.visible = false;
                // bar2.visible = false;
            }
    }
    if (eventName == "Rainbow"){
        if(value2 != "Super"){
            if(value1 == "ON"){
                // PlayState.instance.playVideo("guns");
                newVal = 0.2;
                canRainbow = true;
                canFloat = false;
                FlxG.camera.flash(0xFFFFFFFF, 1);
    
    
                // bar1.makeGraphic(160, 720, 0xFF919191);
                // bar2.makeGraphic(160, 720, 0xFF919191);
            }
            else if(value1 == "OFF"){
                canRainbow = false;
                canFloat = false;
                FlxTween.tween(colorSwap, {saturation: 0, hue: Std.int(colorSwap.hue)}, 3.5);
                // FlxTween.color(bar1, 3.5, 0xFF919191, 0xFF000000);
                // FlxTween.color(bar2, 3.5, 0xFF919191, 0xFF000000);
            }
        }else{
            if(value1 == "ON"){
                canRainbow = true;
                canFloat = true;
                newVal = 0.4;
                FlxG.camera.flash(0xFFFFFFFF, 1);

                // PlayState.instance.camGame.filtersEnabled = false;
                // PlayState.instance.camHUD.filtersEnabled = false;
                PlayState.instance.camGame.setFilters([]);
                PlayState.instance.camHUD.setFilters([]);
                PlayState.instance.boyfriend.shader = colorSwap.shader;
            }
            else if (value1 == "OFF"){
                canRainbow = false;
                canFloat = false;

                PlayState.instance.camGame.setFilters([sillyOverlay]);
                PlayState.instance.camHUD.setFilters([sillyOverlay]);
                PlayState.instance.boyfriend.shader = null;
            }
        }
    }
}